openapi: 3.0.0
info:
  version: 1.0.0
  title: hng_Boilerplate
  description: >-
    API for user authentication, user management, blogs, email, organisations, payments, and notifications

tags:
  - name: Auth
    description: Authentication related endpoints
  - name: Manage Users
    description: Manage all user related endpoints
  - name: Blogs
    description: Blog related endpoints
  - name: Email
    description: Email related endpoints
  - name: Organisations
    description: Organisation related endpoints
  - name: Payments
    description: Payment related endpoints
  - name: Notifications
    description: Receive necessary Notifications
  - name: Contact Us
    description: Endpoint for contacting for help

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    CreateUser:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        first_name:
          type: string
        last_name:
          type: string

    Login:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
        profile_picture:
          type: string
        role:
          type: string
          enum: [user, admin, superadmin]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        last_login:
          type: string
          format: date-time
        language:
          type: string
        region:
          type: string

    Organisation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UserOrganisation:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        organization_id:
          type: string
        role:
          type: string
          enum: [member, admin]
        created_at:
          type: string
          format: date-time

    Session:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        token:
          type: string
        created_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time

    Payment:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        organization_id:
          type: string
        amount:
          type: number
          format: decimal
        currency:
          type: string
        payment_method:
          type: string
          enum: [stripe, flutterwave, lemonsqueezy]
        status:
          type: string
          enum: [pending, completed, failed]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Message:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        organization_id:
          type: string
        body:
          type: string
        status:
          type: string
          enum: [queued, sent, failed]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    CreateMessage:
      type: object
      properties:
        user_id:
          type: string
        organization_id:
          type: string
        body:
          type: string
        status:
          type: string
          enum: [queued, sent, failed]
    UpdateMessage:
      type: object
      properties:
        body:
          type: string
        status:
          type: string
          enum: [queued, sent, failed]

    EmailTemplate:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        subject:
          type: string
        body:
          type: string
        created_at:
          type: string
          format: date-time

    Notification:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        message:
          type: string
        read:
          type: boolean
        created_at:
          type: string
          format: date-time

    Blog:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
        author_id:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ErrorResponse:
      type: object
      properties:
        error:
          type: string

paths:
  /signup:
    post:
      tags:
        - Auth
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /login:
    post:
      tags:
        - Auth
      summary: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        200:
          description: Logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged in successfully
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                  token_type:
                    type: string
                    example: bearer
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /logout:
    post:
      tags:
        - Auth
      summary: Log out the authenticated user
      security:
        - bearerAuth: []
      responses:
        200:
          description: User logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User logged out successfully
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /users:
    get:
      tags:
        - Manage Users
      summary: Get a list of users
      responses:
        200:
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /users/{user_id}:
    get:
      tags:
        - Manage Users
      summary: Get user details
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      tags:
        - Manage Users
      summary: Edit user details
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                first_name:
                  type: string
                last_name:
                  type: string
                profile_picture:
                  type: string
                language:
                  type: string
                region:
                  type: string
      responses:
        200:
          description: User details updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{user_id}/export:
    get:
      tags:
        - Manage Users
      summary: Export user data
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: email
          in: query
          required: true
          schema:
            type: string
            format: email
      responses:
        200:
          description: User data exported successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User data exported successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /users/delete:
    delete:
      tags:
        - Manage Users
      summary: Delete a user account
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
            format: email
      responses:
        200:
          description: User account deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User account deleted successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organizations:
    get:
      tags:
        - Organisations
      summary: Get a list of organizations
      responses:
        200:
          description: List of organizations retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organisation'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Organisations
      summary: Create a new organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        201:
          description: Organization created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Organization created successfully
                  organization:
                    $ref: '#/components/schemas/Organisation'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organizations/{organization_id}:
    get:
      tags:
        - Organisations
      summary: Get organization details
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Organization details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organizations/{organization_id}/members:
    get:
      tags:
        - Organisations
      summary: Get members of an organization
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of organization members retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserOrganisation'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /payments:
    get:
      tags:
        - Payments
      summary: Get a list of payments
      responses:
        200:
          description: List of payments retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Payments
      summary: Create a new payment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                organization_id:
                  type: string
                amount:
                  type: number
                  format: decimal
                currency:
                  type: string
                payment_method:
                  type: string
                  enum: [stripe, flutterwave, lemonsqueezy]
      responses:
        201:
          description: Payment created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Payment created successfully
                  payment:
                    $ref: '#/components/schemas/Payment'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /payments/{payment_id}:
    get:
      tags:
        - Payments
      summary: Get payment details
      parameters:
        - name: payment_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Payment details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /notifications:
    get:
      tags:
        - Notifications
      summary: Get a list of notifications
      responses:
        200:
          description: List of notifications retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Notifications
      summary: Create a new notification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                message:
                  type: string
      responses:
        201:
          description: Notification created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Notification created successfully
                  notification:
                    $ref: '#/components/schemas/Notification'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /notifications/{notification_id}:
    get:
      tags:
        - Notifications
      summary: Get notification details
      parameters:
        - name: notification_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Notification details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /blogs:
    get:
      tags:
        - Blogs
      summary: Get a list of blogs
      responses:
        200:
          description: List of blogs retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Blog'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Blogs
      summary: Create a new blog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                author_id:
                  type: string
      responses:
        201:
          description: Blog created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Blog created successfully
                  blog:
                    $ref: '#/components/schemas/Blog'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /blogs/{blog_id}:
    get:
      tags:
        - Blogs
      summary: Get blog details
      parameters:
        - name: blog_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Blog details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /contact_us:
    post:
      tags:
        - Contact Us
      summary: Contact us form submission
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                message:
                  type: string
      responses:
        200:
          description: Contact form submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contact form submitted successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /messages:
    get:
      tags:
        - Messages
      summary: Get a list of messages
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of messages retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Messages
      summary: Create a new message
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessage'
      responses:
        201:
          description: Message created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /messages/{message_id}:
    get:
      tags:
        - Messages
      summary: Get message details
      security:
        - bearerAuth: []
      parameters:
        - name: message_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Message details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Messages
      summary: Update message details
      security:
        - bearerAuth: []
      parameters:
        - name: message_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMessage'
      responses:
        200:
          description: Message updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Messages
      summary: Delete a message
      security:
        - bearerAuth: []
      parameters:
        - name: message_id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Message deleted successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /email:
    post:
      tags:
        - Email
      summary: Send an email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailTemplate'
      responses:
        200:
          description: Email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email sent successfully.
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'              

servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/AngieTech/hng_task_3/1.0.0